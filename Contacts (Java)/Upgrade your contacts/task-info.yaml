type: edu
files:
- name: test/ContactsTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.function.Function;


    class TestClue {

        Function<String, CheckResult> callback;

        TestClue(Function<String, CheckResult> callback) {
            this.callback = callback;
        }
    }


    public class ContactsTest extends StageTest<TestClue> {

        private CheckResult splitActionsFeedback(int actualSize, String... actions) {
            if (actualSize != actions.length) {
                return CheckResult.wrong(String.format("This test should contain %d actions: %s. " +
                                "You should separate your actions with an empty line.",
                        actions.length,
                        String.join(", ", actions)));
            } else {
                return null;
            }
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of (
                new TestCase<TestClue>()
                    .setInput("exit")
                    .setAttach(new TestClue(output -> {
                        output = output.strip().toLowerCase();
                        if (!output.contains("enter action")) {
                            return new CheckResult(false,
                                "No \"Enter action\" substring found in the output");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<TestClue>()
                    .setInput(
                        "count\n" +
                        "exit")
                    .setAttach(new TestClue(output -> {
                        output = output.strip().toLowerCase();
                        if (!output.contains("0 records")) {
                            return new CheckResult(false,
                                "No \"0 records\" substring found in the output. " +
                                        "If you already have the database, try to delete it.");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<TestClue>()
                    .setInput(
                        "count\n" +
                        "edit\n" +
                        "exit")
                    .setAttach(new TestClue(output -> {
                        output = output.strip().toLowerCase();
                        if (!output.contains("no records to edit")) {
                            return new CheckResult(false,
                                "No \"No records to edit\" substring found in the output");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<TestClue>()
                    .setInput(
                        "count\n" +
                        "remove\n" +
                        "exit")
                    .setAttach(new TestClue(output -> {
                        output = output.strip().toLowerCase();
                        if (!output.contains("no records to remove")) {
                            return new CheckResult(false,
                                "No \"No records to remove\" substring found in the output");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<TestClue>()
                    .setInput(
                        "add\n" +
                            "person\n" +
                            "John\n" +
                            "Smith\n" +
                            "\n" +
                            "\n" +
                            "123 456 789\n" +
                        "count\n" +
                        "exit")
                    .setAttach(new TestClue(output -> {
                        output = output.strip().toLowerCase();
                        if (output.contains("0 records")) {
                            return new CheckResult(false,
                                "Can't add the person");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<TestClue>()
                    .setInput(
                        "add\n" +
                            "person\n" +
                            "John\n" +
                            "Smith\n" +
                            "\n" +
                            "\n" +
                            "123 456 789\n" +
                        "info\n" +
                            "1\n" +
                        "exit")
                    .setAttach(new TestClue(output -> {
                        String[] blocks = output.strip().split("(\\s*\\n\\s*){2,}");
                        var feedback = splitActionsFeedback(blocks.length, "add", "info", "exit");
                        if (feedback != null) return feedback;

                        String infoBlock = blocks[1];
                        if (!infoBlock.contains("Name: John")) {
                            return new CheckResult(false,
                                    "User info doesn't contain the correct user name");
                        }
                        if (!infoBlock.contains("Surname: Smith")) {
                            return new CheckResult(false,
                                    "User info doesn't contain the correct user surname");
                        }
                        if (!infoBlock.contains("Birth date: [no data]")) {
                            return new CheckResult(false,
                                    "User info doesn't contain the correct birth date");
                        }
                        if (!infoBlock.contains("Gender: [no data]")) {
                            return new CheckResult(false,
                                    "User info doesn't contain the correct gender");
                        }
                        if (!infoBlock.contains("Number: 123 456 789")) {
                            return new CheckResult(false,
                                    "User info doesn't contain the correct phone number");
                        }
                        if (!infoBlock.contains("Time created:")) {
                            return new CheckResult(false,
                                    "User info doesn't contain the creation time");
                        }
                        if (!infoBlock.contains("Time last edit:")) {
                            return new CheckResult(false,
                                    "User info doesn't contain the last edit time");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<TestClue>()
                    .setInput(
                        "add\n" +
                            "organization\n" +
                            "Pizza Shop\n" +
                            "Wall St. 1\n" +
                            "+0 (123) 456-789-9999\n" +
                        "info\n" +
                            "1\n" +
                        "exit")
                    .setAttach(new TestClue(output -> {
                        String[] blocks = output.strip().split("(\\s*\\n\\s*){2,}");
                        var feedback = splitActionsFeedback(blocks.length, "add", "info", "exit");
                        if (feedback != null) return feedback;

                        String infoBlock = blocks[1];
                        if (!infoBlock.contains("Organization name: Pizza Shop")) {
                            return new CheckResult(false,
                                    "Organization info doesn't contain the correct organization name");
                        }
                        if(!infoBlock.contains("Address: Wall St. 1")) {
                            return new CheckResult(false,
                                    "Organization info doesn't contain the correct address");
                        }
                        if(!infoBlock.contains("Number: +0 (123) 456-789-9999")) {
                            return new CheckResult(false,
                                    "Organization info doesn't contain the correct phone number");
                        }
                        if(!infoBlock.contains("Time created:")) {
                            return new CheckResult(false,
                                    "Organization info doesn't contain the creation time");
                        }
                        if(!infoBlock.contains("Time last edit:")) {
                            return new CheckResult(false,
                                "Organization info doesn't contain the last edit time");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<TestClue>()
                    .setInput(
                        "add\n" +
                            "person\n" +
                            "John\n" +
                            "Smith\n" +
                            "\n" +
                            "\n" +
                            "123 456 789\n" +
                        "edit\n" +
                            "1\n" +
                            "gender\n" +
                            "M\n" +
                        "info\n" +
                            "1\n" +
                        "exit")
                    .setAttach(new TestClue(output -> {
                        String[] blocks = output.strip().split("(\\s*\\n\\s*){2,}");
                        var feedback = splitActionsFeedback(blocks.length, "add", "edit", "info", "exit");
                        if (feedback != null) return feedback;

                        String infoBlock = blocks[2];
                        if (!infoBlock.contains("Name: John")
                            || !infoBlock.contains("Surname: Smith")
                            || !infoBlock.contains("Birth date: [no data]")
                            || !infoBlock.contains("Gender: M")
                            || !infoBlock.contains("Number: 123 456 789")
                            || !infoBlock.contains("Time created:")
                            || !infoBlock.contains("Time last edit:")) {
                            return new CheckResult(false,
                                "Editing person gender is not working");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<TestClue>()
                    .setInput(
                        "add\n" +
                            "person\n" +
                            "John2\n" +
                            "Smith2\n" +
                            "\n" +
                            "\n" +
                            "123 456 789\n" +
                        "edit\n" +
                            "1\n" +
                            "name\n" +
                            "John3\n" +
                        "info\n" +
                            "1\n" +
                        "exit")
                    .setAttach(new TestClue(output -> {
                        String[] blocks = output.strip().split("(\\s*\\n\\s*){2,}");
                        var feedback = splitActionsFeedback(blocks.length, "add", "edit", "info", "exit");
                        if (feedback != null) return feedback;

                        String infoBlock = blocks[2];
                        if (!infoBlock.contains("Name: John3")
                            || !infoBlock.contains("Surname: Smith2")
                            || !infoBlock.contains("Birth date: [no data]")
                            || !infoBlock.contains("Gender: [no data]")
                            || !infoBlock.contains("Number: 123 456 789")
                            || !infoBlock.contains("Time created:")
                            || !infoBlock.contains("Time last edit:")) {
                            return new CheckResult(false,
                                "Editing person name is not working");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<TestClue>()
                    .setInput(
                        "add\n" +
                            "person\n" +
                            "John2\n" +
                            "Smith2\n" +
                            "\n" +
                            "\n" +
                            "123 456 789\n" +
                        "edit\n" +
                            "1\n" +
                            "number\n" +
                            "321 654 978\n" +
                        "info\n" +
                            "1\n" +
                        "exit")
                    .setAttach(new TestClue(output -> {
                        String[] blocks = output.strip().split("(\\s*\\n\\s*){2,}");
                        var feedback = splitActionsFeedback(blocks.length, "add", "edit", "info", "exit");
                        if (feedback != null) return feedback;

                        String infoBlock = blocks[2];
                        if (!infoBlock.contains("Name: John2")
                            || !infoBlock.contains("Surname: Smith2")
                            || !infoBlock.contains("Birth date: [no data]")
                            || !infoBlock.contains("Gender: [no data]")
                            || !infoBlock.contains("Number: 321 654 978")
                            || !infoBlock.contains("Time created:")
                            || !infoBlock.contains("Time last edit:")) {
                            return new CheckResult(false,
                                "Editing person number is not working");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<TestClue>()
                    .setInput(
                        "add\n" +
                            "organization\n" +
                            "Pizza Shop\n" +
                            "Wall St. 1\n" +
                            "+0 (123) 456-789-9999\n" +
                        "edit\n" +
                            "1\n" +
                            "address\n" +
                            "Wall St 2\n" +
                        "info\n" +
                            "1\n" +
                        "exit")
                    .setAttach(new TestClue(output -> {
                        String[] blocks = output.strip().split("(\\s*\\n\\s*){2,}");
                        var feedback = splitActionsFeedback(blocks.length, "add", "edit", "info", "exit");
                        if (feedback != null) return feedback;

                        String infoBlock = blocks[2];
                        if (!infoBlock.contains("Organization name: Pizza Shop")
                            || !infoBlock.contains("Address: Wall St 2")
                            || !infoBlock.contains("Number: +0 (123) 456-789-9999")
                            || !infoBlock.contains("Time created:")
                            || !infoBlock.contains("Time last edit:")) {
                            return new CheckResult(false,
                                "Editing organization address is not working");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<TestClue>()
                    .setInput(
                        "add\n" +
                            "organization\n" +
                            "Pizza Shop\n" +
                            "Wall St. 1\n" +
                            "+0 (123) 456-789-9999\n" +
                        "edit\n" +
                            "1\n" +
                            "number\n" +
                            "+0 (123) 456-789-12345\n" +
                        "info\n" +
                            "1\n" +
                        "exit")
                    .setAttach(new TestClue(output -> {
                        String[] blocks = output.strip().split("(\\s*\\n\\s*){2,}");
                        var feedback = splitActionsFeedback(blocks.length, "add", "edit", "info", "exit");
                        if (feedback != null) return feedback;

                        String infoBlock = blocks[2];
                        if (!infoBlock.contains("Organization name: Pizza Shop")
                            || !infoBlock.contains("Address: Wall St. 1")
                            || !infoBlock.contains("Number: +0 (123) 456-789-12345")
                            || !infoBlock.contains("Time created:")
                            || !infoBlock.contains("Time last edit:")) {
                            return new CheckResult(false,
                                "Editing organization number is not working");
                        }
                        return CheckResult.correct();
                    }))
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            try {
                return clue.callback.apply(reply);
            }
            catch (Exception ex) {
                return new CheckResult(false, "Can't check the answer");
            }
        }
    }
  learner_created: false
- name: src/contacts/Phonebook.java
  visible: true
  text: |-
    package contacts;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    class Phonebook {
        private int size = 0;
        List<Contact> contactList = new ArrayList<>();

        public void addContact(Contact contact) {
            contactList.add(contact);
            size += 1;
        }

        public void add(Phonebook phonebook) {
            Contact contact = new Contact();
            Scanner input = new Scanner(System.in);
            System.out.println("Enter the name: >");
            contact.setName(input.nextLine());
            System.out.println("Enter the surname: >");
            contact.setSurname(input.nextLine());
            System.out.println("Enter the number: >");
            String s = input.nextLine();
            if (!contact.isValidNumber(s)) {
                System.out.println("Wrong number format!");
            }
            contact.setNumber(s);
            contact.hasNumber(contact.getNumber());
            System.out.println("The record added.\n");
            phonebook.addContact(contact);
    //        System.out.println("A Phone Book with a single record created!");
        }

        public void remove(Phonebook phonebook) {
            Scanner input = new Scanner(System.in);
            if (phonebook.size == 0) {
                System.out.println("No records to remove!");
            } else {
                for (int i = 0; i < contactList.size(); i++) {
                    Contact s = contactList.get(i);
                    System.out.println(i+1 + ". " + s);
                }

                System.out.println("Select a record: > ");
                if (input.hasNext()) {
                    String s = input.next();
                    if (isNumeric(s)) {
                        int number = Integer.parseInt(s) - 1;
                        if (number < phonebook.size && number > -1) {
                            contactList.remove(number);
                            size -= 1;
                            System.out.println("The record removed!");
                        }
                    }
                }
            }

        }

        public void edit(Phonebook phonebook) {
            Scanner input = new Scanner(System.in);
            if (phonebook.size == 0) {
                System.out.println("No records to edit!");
            } else {
                for (int i = 0; i < contactList.size(); i++) {
                    Contact s = contactList.get(i);
                    System.out.println(i+1 + ". " + s);
                }

                System.out.println("Select a record: > ");
                String s = input.next();
                while (!isNumeric(s)) {
                    System.out.println("Select a record: > ");
                    s = input.next();
                }
                if (isNumeric(s))  {
                    int number = Integer.parseInt(s) - 1;
                    if (number < phonebook.size && number > -1) {
                        System.out.println("Select a field (name, surname, number): > ");
                        String field = input.next().trim();
                        Contact contact = contactList.get(number);
                        switch (field) {
                            case "name" -> {
                                System.out.println("Enter name: > ");
                                String info = input.next();
                                contact.setName(info);
                            }
                            case "surname" -> {
                                System.out.println("Enter surname: > ");
                                String info = input.next();
                                contact.setSurname(info);
                            }
                            case "number" -> {
                                System.out.println("Enter number: > ");
                                String q = input.nextLine();
                                if (!contact.isValidNumber(q)) {
                                    System.out.println("Wrong number format!");
                                }
                                contact.setNumber(q);
                                contact.hasNumber(contact.getNumber());
                            }
                            default -> {
                            }
                        }
                        System.out.println("The record updated!");
                    }
                }

            }
        }

        public void count(Phonebook phonebook) {
            System.out.println("The Phone Book has " + phonebook.size + " records");
        }

        public void list(Phonebook phonebook) {
            if (phonebook.size == 0) {
                System.out.println("No records!");
            } else {
                for (int i = 0; i < contactList.size(); i++) {
                    Contact s = contactList.get(i);
                    System.out.println(i+1 + ". " + s);
                }
            }
        }

        public void exit() {
            System.exit(0);
        }

        public static boolean isNumeric(String str) {
            if (str != null && !"".equals(str.trim()))
                return str.matches("^[0-9]+$");
            else
                return false;
        }
    }
  learner_created: true
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Phonebook phonebook = new Phonebook();
            Scanner input = new Scanner(System.in);
            String action = "";
            while (!action.equals("exit")) {
                System.out.println("Enter action (add, remove, edit, count, list, exit): >");
                action = input.next();
                switch (action) {
                    case "add" -> phonebook.add(phonebook);
                    case "remove" -> phonebook.remove(phonebook);
                    case "edit" -> phonebook.edit(phonebook);
                    case "count" -> phonebook.count(phonebook);
                    case "list" -> phonebook.list(phonebook);
                    case "exit" -> phonebook.exit();
                    default -> System.out.println("Enter action (add, remove, edit, count, list, exit): >");

                }
            }
        }
    }
  learner_created: true
- name: src/contacts/Person.java
  visible: true
  text: |-
    package contacts;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    class Contact {

        private String name;
        private String surname;
        private String number = "[no number]";

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getSurname() {
            return surname;
        }

        public void setSurname(String surname) {
            this.surname = surname;
        }

        public String getNumber() {
            return hasNumber(number);
        }

        public void setNumber(String number) {
            if (isValidNumber(number)) {
                this.number = number;
            }
            else {
                this.number = "[no number]";
            }
        }
        public String hasNumber(String number) {
            return number.isEmpty() ? "[no number]" : number;
        }

        public boolean isValidNumber(String number) {
            // 此处可以根据要求编写电话号码的验证逻辑，使用正则表达式或其他方法
            // 如果符合要求则返回 true，否则返回 false
            String pattern = "^\\+?(\\(\\w+\\)|\\w+[ -]\\(\\w{2,}\\)|\\w+)([ -]\\w{2,})*";
            Pattern regex = Pattern.compile(pattern);
            Matcher matcher = regex.matcher(number);
            return matcher.matches();
        }

        @Override
        public String toString() {
            return name + " " + getSurname() + ", " + getNumber();
        }

    }
  learner_created: true
- name: src/contacts/Contact.java
  visible: true
  learner_created: true
- name: src/contacts/Organization.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5326#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 25 Jun 2023 06:58:52 UTC"
record: 4
